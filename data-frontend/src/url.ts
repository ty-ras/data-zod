/**
 * @file This file contains `zod` -specific code on defining URL path portion for invoking endpoints on frontend side.
 */

import type * as protocol from "@ty-ras/protocol";
import type * as data from "@ty-ras/data";
import * as dataIO from "@ty-ras/data-zod";
import * as dataFE from "@ty-ras/data-frontend";
import * as t from "zod";

/**
 * This function creates {@link data.DataValidator} for encoding (serializing) URL path parameters into URL path string.
 * It is meant to be used as [template string function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals): ``tyras.url`/api/xyz`;``.
 * @param fragments The string literals as generated by compiler.
 * @returns This overload returns just string, as there are no arguments.
 */
export function url(fragments: TemplateStringsArray): string;

/**
 * This function creates {@link data.DataValidator} for encoding (serializing) URL path parameters into URL path string.
 * It is meant to be used as [template string function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals): ``tyras.url`/api/xyz`;``.
 * @param fragments The string literals as generated by compiler.
 * @param args The template args as generated by compiler.
 * @returns This overload returns {@link data.DataValidator} which will take named URL path arguments as input, and returns URL path string as output.
 */
export function url<
  TArgs extends Array<
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    dataFE.URLParameterInfo<string, any, dataIO.ValidatorHKT>
  >,
>(
  fragments: TemplateStringsArray,
  ...args: TArgs
): data.DataValidator<
  protocol.RuntimeOf<dataFE.URLParameterReducer<TArgs>>,
  string
>;

/**
 * This function creates {@link data.DataValidator} for encoding (serializing) URL path parameters into URL path string.
 * It is meant to be used as [template string function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals): ``tyras.url`/api/xyz`;``.
 * @param fragments The string literals as generated by compiler.
 * @param args The template args as generated by compiler.
 * @returns This overload returns {@link data.DataValidator} which will take named URL path arguments as input, and returns URL path string as output.
 */
export function url<
  TArgs extends Array<
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    dataFE.URLParameterInfo<string, any, dataIO.ValidatorHKT>
  >,
>(
  fragments: TemplateStringsArray,
  ...args: TArgs
):
  | string
  | data.DataValidator<
      protocol.RuntimeOf<dataFE.URLParameterReducer<TArgs>>,
      string
    > {
  return dataFE.urlGeneric<dataIO.ValidatorHKT, TArgs>(
    fragments,
    args,
    // There is some nasty type error for this, but it works => 'as any'.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
    t.object as any,
    dataIO.fromEncoder,
  );
}

/**
 * This function creates {@link dataFE.URLParameterInfo} from given arguments.
 * The results of this function are meant to be used by {@link url} function.
 * @param name The name of the URL path parameter.
 * @param encoder The runtime validation of URL path parameter, as `zod` object.
 * @param regExp The optional regular expression that URL path parameter must adher to. If omitted, {@link data.defaultParameterRegExp} will be used.
 * @returns The constructed {@link dataFE.URLParameterInfo}.
 */
export const urlParam = <TName extends string, TRuntime>(
  name: TName,
  encoder: data.MaterializeEncoder<dataIO.ValidatorHKT, TRuntime, string>,
  regExp?: RegExp,
): dataFE.URLParameterInfo<TName, TRuntime, dataIO.ValidatorHKT> =>
  dataFE.urlParamGeneric(name, encoder, regExp);
